---
title: Git Rev News Edition 88 (June 30th, 2022)
layout: default
date: 2022-06-30 12:06:51 +0100
author: chriscool
categories: [news]
navbar: false
---

## Git Rev News: Edition 88 (June 30th, 2022)

Welcome to the 88th edition of [Git Rev News](https://git.github.io/rev_news/rev_news/),
a digest of all things Git. For our goals, the archives, the way we work, and how to contribute or to
subscribe, see [the Git Rev News page](https://git.github.io/rev_news/rev_news/) on [git.github.io](http://git.github.io).

This edition covers what happened during the months of May and June 2022.

## Discussions

### General

* [Google Summer of Code](https://summerofcode.withgoogle.com)
  contributors working on Git are now in the ["Coding Period"](https://developers.google.com/open-source/gsoc/timeline#june_13)
  (from June 13 to September 19) of the program and have posted at least
  once on their blogs:

  - Abhradeep Chakraborty, who works on
    ["Reachability bitmap improvements"](https://summerofcode.withgoogle.com/programs/2022/projects/UPtA6qdf),
    has published [his latest post](https://medium.com/@abhra303/gsoc-week-2-redesign-the-table-format-829dae755a5)
    on [his Medium blog](https://medium.com/@abhra303).

  - Shaoxuan Yuan, who works on ["More Sparse Index Integrations"](https://summerofcode.withgoogle.com/programs/2022/projects/hz4rcOUB)
    has published [his latest post](https://ffyuanda.github.io/blog/GSoC-week-2/)
    on [his website](https://ffyuanda.github.io/).

  - Jaydeep Das, who works on ["Unify ref-filters with other pretty formats"](https://summerofcode.withgoogle.com/programs/2022/projects/8mYcnerl)
    has published [his latest post](https://jdeep.me/posts/10.d/)
    on [his website](https://jdeep.me/posts/).

<!---
### Reviews
-->

### Support

* [Bug in merge-ort (rename detection can have collisions?)](https://public-inbox.org/git/kl6lee006mle.fsf@chooglen-macbookpro.roam.corp.google.com/)

  Glen Choo reported on the mailing list that `git merge` was failing
  on certain branches of a repo used at his workplace. As the repo is
  a public one, Glen was able to share the full recipe to reproduce the bug.

  When following it, this error appears:

  `Assertion failed: (ci->filemask == 2 || ci->filemask == 4), function apply_directory_rename_modifications, file merge-ort.c, line 2410.`

  Glen noticed that the bug seemed to be specific to the "ort" merge
  strategy, which became the default merge strategy in Git 2.34.0
  released last November.  When using the "recursive" strategy,
  which used to be the default merge strategy before "ort" took over,
  the merge seemed to work as expected.

  Glen also tried to debug the issue by himself and found that the
  reason for the assertion failure seemed to be that two files
  involved in the merge were renames of each other.

  Elijah Newren, who developed the new "ort" strategy, thanked Glen
  for the detailed report, and said that he found a small reproduction
  recipe to simplify what's going on. He explained it with the
  following sequence:

```
#   Commit O: sub1/file,                 sub2/other
#   Commit A: sub3/file,                 sub2/{other, new_add_add_file_1}
#   Commit B: sub1/{file, newfile}, sub1/sub2/{other, new_add_add_file_2}
#
#   In words:
#     A: sub1/ -> sub3/, add sub2/new_add_add_file_1
#     B: sub2/ -> sub1/sub2, add sub1/newfile, add sub1/sub2/new_add_add_file_2
```

  He noted, though, that he can also trigger a different fatal error
  in the "ort" strategy with a small tweak to the test setup, and can
  also trigger that same other fatal error in the "recursive" strategy
  with his test cases.

  He then explained that both the "ort" and "recursive" merge
  strategies have code to avoid "doubly transitive [directory]
  renames". Such renames happen when, for example, on one side of the
  merge a directory named "A" is renamed to "B", while on the other
  side "B" is renamed to "C".

  However, the code to avoid "doubly transitive [directory] renames" is
  fooled when a parent directory of a directory is renamed. For
  example if on one side a directory named "A" is renamed to "B",
  while on the other side a leading directory of "B" is renamed to
  "C".  That still wouldn't be quite enough to trigger this
  bug, though.  It also requires adding a file into directory A on one
  side and a file with the same name into directory B on the other.

  Junio Hamano, the Git maintainer, thanked Elijah for his continued
  support of the merge strategy, and noticed that at least the code was
  not "making a silent mismerge" in this special case, and that the
  recursive strategy could be used as a fallback.

  Elijah replied that he was glad the recursive strategy worked for
  Glen but noted that it didn't work with his minimal reproduction
  test case, which suggests it's less reliable as a fallback than one
  might hope.

  Glen then wondered if turning off rename detection could help in
  case of merges with complex renames like this, but Elijah pointed
  out [that might be more problematic than
  helpful](https://lore.kernel.org/git/CABPp-BGN0DoSr3bcjTmGZkcoj_dSVzOgFUQ++R=_z8v=nAJsTg@mail.gmail.com/),
  particularly since this case had a very large number of renames and
  users tend to have difficulty correctly resolving the conflicts that
  result from a lack of rename detection.  However, he suggested that
  if turning off rename detection was really wanted that one could use
  the "resolve" strategy instead, which "is roughly the recursive strategy
  minus the renames and the multiple merge base handling".

  Elijah also posted [a small patch
  series](https://lore.kernel.org/git/pull.1268.git.1655871651.gitgitgadget@gmail.com/)
  that adds test cases demonstrating the bug Glen found and the
  related ones he found based on it, and fixes the bugs in the ort
  strategy.  (The recursive strategy is deprecated, and the bugs noted
  here are not security critical.)

  Jonathan Tan reviewed the series and verified that it indeed fixes
  Glen's test case. Calvin Wan also commented on the patch series. So
  there is good hope that after a few iterations to polish the series
  the bugs will be fixed soon.

<!---
## Developer Spotlight:
-->

## Releases

+ Git [2.37.0](https://public-inbox.org/git/xmqqy1xinf00.fsf@gitster.g/),
[2.37.0-rc2](https://public-inbox.org/git/xmqqedzg4hqj.fsf@gitster.g/),
[2.37.0-rc1](https://public-inbox.org/git/xmqqv8syloqp.fsf@gitster.g/),
[2.37.0-rc0](https://public-inbox.org/git/xmqqwndk10gg.fsf@gitster.g/)
+ Git for Windows [2.37.0(1)](https://github.com/git-for-windows/git/releases/tag/v2.37.0.windows.1),
[2.37.0-rc2(1)](https://github.com/git-for-windows/git/releases/tag/v2.37.0-rc2.windows.1),
[2.37.0-rc1(1)](https://github.com/git-for-windows/git/releases/tag/v2.37.0-rc1.windows.1),
[2.37.0-rc0(1)](https://github.com/git-for-windows/git/releases/tag/v2.37.0-rc0.windows.1)
+ Bitbucket Server [8.2](https://confluence.atlassian.com/bitbucketserver/bitbucket-server-release-notes-872139866.html)
+ Gerrit Code Review [3.6.1](https://www.gerritcodereview.com/3.6.html#361)
+ GitHub Enterprise [3.5.1](https://help.github.com/enterprise-server@3.5/admin/release-notes#3.5.1),
[3.4.4](https://help.github.com/enterprise-server@3.4/admin/release-notes#3.4.4),
[3.3.9](https://help.github.com/enterprise-server@3.3/admin/release-notes#3.3.9),
[3.2.14](https://help.github.com/enterprise-server@3.2/admin/release-notes#3.2.14),
[3.1.22](https://help.github.com/enterprise-server@3.1/admin/release-notes#3.1.22)
+ GitLab [15.1](https://about.gitlab.com/releases/2022/06/22/gitlab-15-1-released/)
[15.0.3](https://about.gitlab.com/releases/2022/06/16/gitlab-15-0-3-released/),
[15.0.2](https://about.gitlab.com/releases/2022/06/06/gitlab-15-0-2-released/),
[15.0.1, 14.10.4, and 14.9.5](https://about.gitlab.com/releases/2022/06/01/critical-security-release-gitlab-15-0-1-released/)
+ GitHub Desktop [3.0.3](https://desktop.github.com/release-notes/),
[3.0.2](https://desktop.github.com/release-notes/),
[3.0.1](https://desktop.github.com/release-notes/)
+ Tower for Mac [8.3](https://www.git-tower.com/release-notes/mac?show_tab=release-notes)
+ Tower for Windows [3.3](https://www.git-tower.com/release-notes/windows?show_tab=release-notes)

## Other News
__Events__
+ [Git Merge 2022](https://github.blog/2022-06-15-git-merge-2022/)
  by Lee Reilly on GitHub blog.
  [Git Merge](http://git-merge.com/), the conference dedicated to bringing the Git community together,
  returns on September 14-15 in Chicago, Illinois, USA.
  [Call for Speakers](https://sessionize.com/git-merge-2022) is open through Sunday, July 10.

__Various__
+ [Highlights from Git 2.37](https://github.blog/2022-06-27-highlights-from-git-2-37/)
  by Taylor Blau on GitHub's blog.
+ [v2.37.0 highlights video](https://www.youtube.com/watch?v=c1VdZq77i70) by GitKraken.
+ [How Atlassian made Git push over HTTPS faster for Bitbucket Cloud](https://www.atlassian.com/engineering/faster-git-push-over-https-for-bitbucket-cloud)
  by Brent Thew on [Atlassian Engineering](https://www.atlassian.com/engineering) blog.
+ [Why Weâ€™re Sticking with Ruby on Rails at GitLab](https://thenewstack.io/why-were-sticking-with-ruby-on-rails-at-gitlab/)
  by Sid Sijbrandij on The New Stack (contributed post, sponsored by GitLab).
+ [Improved verification of historic Git commit signatures \[in GitHub\]](https://github.blog/changelog/2022-05-31-improved-verification-of-historic-git-commit-signatures/)
  with respect to public GPG signing keys that are expired or revoked (but not compromised).
+ [AppSmith Adds Git Support to Low-Code App Dev Framework](https://devops.com/appsmith-adds-git-support-to-low-code-app-dev-framework/)
  by Mike Vizard on DevOps\.com.
+ [Improve Git monorepo performance with a file system monitor](https://github.blog/2022-06-29-improve-git-monorepo-performance-with-a-file-system-monitor/)
  by Jeff Hostetler on GitHub's blog.

__Light reading__
+ [Improvements in git 2.37 when resolving conflicts with vimdiff](https://u92.eu/blog/git-vimdiff/)
  describes a change in Git 2.37 w.r.t. vimdiff mergetool drivers.
+ [Better File Comparison with Kaleidoscope](https://www.git-tower.com/blog/kaleidoscope/) by Bruno Brito on Towerâ€™s blog.
+ [Working with Feature Branches](https://www.git-tower.com/blog/working-with-feature-branches/) by Bruno Brito on Towerâ€™s blog.
+ [Coming Up on Tower's Roadmap](https://www.git-tower.com/blog/coming-up-on-the-roadmap-2022/) by Bruno Brito on Towerâ€™s blog.
+ [The Three Phases of Software Development](https://www.git-tower.com/blog/three-phases-of-software-development/) by Kristian Lumme on Towerâ€™s blog.
+ [Best practices for Git branching](https://blogs.halodoc.io/best-practices-for-git/),
  describing Git flow at Halodoc, by Ashish Anand.
+ [How to Recover a Deleted File in Git â€“ Revert Changes After a Hard Reset](https://www.freecodecamp.org/news/how-to-recover-a-deleted-file-in-git/)
  by Zaira Hira on freeCodeCamp.
+ [Git List Remote Branches](https://www.freecodecamp.org/news/git-list-remote-branches/)
  by Quincy Larson on freeCodeCamp.
+ [Replacing Your Git Command Cheat Sheet With AI Command Search](https://www.warp.dev/blog/replace-git-cheat-sheet-ai-command-search)
  by Jessica Wang on Warp blog; uses [Warp's AI Command search](https://docs.warp.dev/features/ai-command-search#:~:text=Press%20CTRL%2D%60%20to%20open,ENTER%20to%20generate%20the%20command.).
+ [We Put Half a Million files in One git (Mono-)Repository, Hereâ€™s What We Learned](https://canvatechblog.com/we-put-half-a-million-files-in-one-git-repository-heres-what-we-learned-ec734a764181)
  by Ahn Lee in Canva Engineering Blog (a Medium-based blog).
    + See also, for example, articles on [Developer Homepage of Derrick Stolee](https://stolee.dev/),
      including [The Future of Git at Scale](https://www.youtube.com/watch?v=pXdabSCz4JA) 2021 presentation
      ([slides](https://stolee.dev/docs/universe-2020.pdf) available),
      a survey of some advanced Git features to help Git scale to the largest monorepos.
+ [Reducing the size of a git repository with git-replace](https://andrewlock.net/reducing-the-size-of-a-git-repository-with-git-replace/)
  by Andrew Lock on andrewlock\.net, where repository is split into
  a small "current" repository containing a minimal amount of history, and
  a "history" repository containing all the commits prior to the creation of the new repository,
  stitched together when needed with git-replace.
+ [How to Prevent Merge Conflicts (or at least have less of them)](https://blackgirlbytes.dev/how-to-prevent-merge-conflicts)
  by RizÃ¨l Scarlett, featured on daily.dev ([also on DEV.to](https://dev.to/github/how-to-prevent-merge-conflicts-or-at-least-have-less-of-them-109p)).
  It is the last part
  of 3 part [Intro to Git](https://dev.to/blackgirlbytes/series/17601) series on DEV\.to,
  beginning with [How Do I Resolve Merge Conflicts?](https://dev.to/github/how-do-i-resolve-merge-conflicts-5438).
+ [People rarely use complicated git commands on the weekend, and I have the data to prove it.](https://dev.to/devteam/people-rarely-use-complicated-git-commands-on-the-weekend-and-i-have-the-data-to-prove-it-3ae2)
  by Ben Halpern for The DEV Team on DEV\.to.
+ [How Git truly works](https://towardsdatascience.com/how-git-truly-works-cd9c375966f6)
  by Alberto Prospero in Towards Data Science (a Medium-based blog).
+ [Sourceware â€“ GNU Toolchain Infrastructure roadmap](https://gnu.wildebeest.org/blog/mjw/2022/06/22/sourceware-gnu-toolchain-infrastructure-roadmap/)
  by Mark J. Wielaard

__Git tools and sites__
+ [Sourceware](https://sourceware.org/) is community run infrastructure, mailing lists,
  git, bug trackers, wikis, etc. hosted in the Red Hat Open Source
  [Community Infrastructure Community Cage](https://osci.io/tenants/).
  Uses [shared buildbot](https://builder.sourceware.org/) for (test) automation,
  and [patchwork](https://patchwork.sourceware.org/) for tracking the state of contributions;
  most tests upload all results to [bunsendb](https://sourceware.org/git/bunsendb.git).
  Uses mirror at SourceHut, <https://sr.ht/~sourceware/>, for web forge.
+ [unix-history-repo](https://github.com/dspinellis/unix-history-repo) is a repository
  representing a reconstructed version of the Unix history from 1970 until today,
  based on the currently available data.  Note that this repository will be often
  automatically regenerated from scratch.
+ [git-repair](http://git-repair.branchable.com/) can repair various forms of damage to Git repositories;
  a complement to `git fsck`, which finds problems, but does not fix them.
  It is a Haskell program,
  developed as a spinoff of [git-annex](http://git-annex.branchable.com/) (for large files management).
+ [Rich Enhanced Shell History (resh)](https://github.com/curusarn/resh)
  provides contextual shell history for zsh and bash,
  where relevant results are based on current directory, _git repo_, exit status, and host.

## Credits

This edition of Git Rev News was curated by
Christian Couder &lt;<christian.couder@gmail.com>&gt;,
Jakub NarÄ™bski &lt;<jnareb@gmail.com>&gt;,
Markus Jansen &lt;<mja@jansen-preisler.de>&gt; and
Kaartic Sivaraam &lt;<kaartic.sivaraam@gmail.com>&gt;
with help from Bruno Brito, Elijah Newren, Matheus Tavares
and Johannes Schindelin.
