---
title: Git Rev News Edition 67 (September 24rd, 2020)
layout: default
date: 2020-09-24 12:06:51 +0100
author: chriscool
categories: [news]
navbar: false
---

## Git Rev News: Edition 67 (September 24rd, 2020)

Welcome to the 67th edition of [Git Rev News](https://git.github.io/rev_news/rev_news/),
a digest of all things Git. For our goals, the archives, the way we work, and how to contribute or to
subscribe, see [the Git Rev News page](https://git.github.io/rev_news/rev_news/) on [git.github.io](http://git.github.io).

This edition covers what happened during the month of August 2020.

## Discussions

### General

* [GSoC 2020 End](https://summerofcode.withgoogle.com/organizations/4722049416691712/#projects)

  The Google Summer of Code 2020 officially ended on September 8, 2020.
  Congratulations to the three students who were mentored by the
  Git community, as they successfully passed all the
  evaluations! Their final reports and code submissions are available:

  * Hariom Verma, who was mentored by Heba Waly and Christian Couder,
    worked on ["Unify ref-filter formats with other \-\-pretty formats"](https://harry-hov.github.io/blogs/posts/the-final-report).

  * Abhishek Kumar, who was mentored by Jakub Narębski and D. Stolee,
    worked on ["Implement Generation Number v2"](https://github.com/abhishekkumar2718/GSoC20/blob/master/README.md).

  * Shourya Shukla, who was mentored by Kaartic Sivaraam and Christian Couder,
    worked on ["Convert submodule to builtin"](https://shouryashukla.blogspot.com/2020/08/the-final-report.html).

### Reviews

* [[RFC PATCH 0/2]extend \-\-abbrev support to diff-patch format](https://lore.kernel.org/git/cover.1596887883.git.congdanhqx@gmail.com/)

  Đoàn Trần Công Danh sent a small RFC patch series that makes the diff
  machinery, which is used by `git diff` and similar commands, support
  the `--abbrev` option when it shows a patch.

  In addition to the familiar `--patch` format, which is used when
  showing regular diffs in a way similar to the
  [unified format of the Unix `diff` command](https://en.wikipedia.org/wiki/Diff#Unified_format),
  the diff machinery can produce the `--raw` format output to show object
  names before and after the change for each path like this:

  ```
  :100644 100644 86e5411f39 f1b1bc8aa0 M  Makefile
  ```

  In the `--patch` format, object names before and after the change
  appear on the index line, which looks like this:

  ```
  index 4adb9ce124..67d9801da3 100644
  ```

  The `--abbrev` option used to control the abbreviation of the
  object names in the `--raw` format but did not affect those shown
  on the index line in the `--patch` format. Đoàn's patch series
  makes the option control both.

  In the cover letter of his RFC patch series, Đoàn explained
  how the changes would improve his workflow when dealing with
  patches. But Junio Hamano and Jeff King, alias Peff, replied saying
  that they had trouble understanding the purpose of the series from
  the explanations in the cover letter.

  After a discussion with Peff and Junio, it turns out that using
  the `--full-index` option is a better approach to help Đoàn's workflow
  (the option was specifically designed to ensure that the index
  line in the `--patch` format can be used to exactly identify the
  objects involved in the change to help the users, which was what
  Đoàn's workflow wanted). However, a consensus was reached that
  Đoàn's patch series was worth moving forward, because it improved
  consistency between the diff formats.

  So Đoàn sent a
  [version 2](https://lore.kernel.org/git/cover.1597146478.git.congdanhqx@gmail.com/)
  of his patch series with only changes in the cover letter and in the
  commit message of the second patch.

  Junio replied to the first patch of the series though. This patch
  changed how `--no-abbrev` was dealt with. Junio asked for
  clarifications in the commit message, especially about why the patch
  was necessary.

  So Đoàn sent a
  [version 3](https://lore.kernel.org/git/cover.1597364493.git.congdanhqx@gmail.com/)
  of his patch series with only changes in the commit message of the
  first patch. After further discussion with Junio, it appears that
  the patch was not actually necessary.

  In the meantime though Gábor Szeder found that the tests in the
  second patch were failing when run with
  `GIT_TEST_DEFAULT_HASH=sha256`. This setting makes Git use the
  [SHA-256 hash algorithm](https://en.wikipedia.org/wiki/SHA-2)
  instead of the usual
  [SHA-1 hash algorithm](https://en.wikipedia.org/wiki/SHA-1)
  for object names.

  A discussion about the best approach to fix this then followed
  between Đoàn, Junio and Brian M. Carlson, who has been working for a
  long time on implementing support for SHA-256 in Git.

  Đoàn eventually sent a
  [version 4](https://lore.kernel.org/git/cover.1597926783.git.congdanhqx@gmail.com/)
  of his patch series, where the first patch of his version 3 had been
  discarded, but a new patch to improve handling of SHA-256 object
  names in the tests replaced it.

  Junio and Đoàn discussed further improvements to the commit messages
  of both patches. Then Đoàn sent a
  [version 5](https://lore.kernel.org/git/cover.1598010556.git.congdanhqx@gmail.com/)
  taking these improvements into account.

  The patch series has since been merged into the 'master' branch.

<!---
### Support
-->

## Developer Spotlight: Đoàn Trần Công Danh

* Who are you and what do you do?

  I'm just another average developer addicted to an exotic environment.
  Outside of my $dayjobs, I maintain Git and some other packages for
  VoidLinux.

* What would you name your most important contribution to Git?

  I would consider fixing remaining problems with musl libc my most
  important contributions to Git,  since I mostly stay inside my musl
  box these days.

* What are you doing on the Git project these days, and why?

  I mostly watch for sideline these days, since I'm busy with other
  things. Occasionally, I jump in one or two discussion since that topic
  looks relevant to me. Sometimes, I write a patch or two to support my
  own jobs.

* If you could get a team of expert developers to work full time on
  something in Git for a full year, what would it be?

  I don't have anything specific in mind, except the transition into the
  new hash algorithm, brian m. carlson has done a very good job, and
  I understand the transition would require a long transition period,
  testing, a lot of testing.

* If you could remove something from Git without worrying about
  backwards compatibility, what would it be?

  The diff to merge-base notation (upstream...fork) of the diff family.
  This has been floating in the mailing list for a while, and I won't
  waste this opportunity to not mention it again.

  There's an on-going change from Denton Liu to [support `--merge-base`](https://public-inbox.org/git/cover.1600600823.git.liu.denton@gmail.com/)
  into the diff family. Hopefully, people can retrain their brain-muscles to
  use this new option instead.

## Releases

+ GitHub Enterprise [2.22.0](https://enterprise.github.com/releases/2.22.0/notes),
[2.21.7](https://enterprise.github.com/releases/2.21.7/notes),
[2.20.16](https://enterprise.github.com/releases/2.20.16/notes),
[2.19.22](https://enterprise.github.com/releases/2.19.22/notes),
[2.21.6](https://enterprise.github.com/releases/2.21.6/notes),
[2.20.15](https://enterprise.github.com/releases/2.20.15/notes),
[2.19.21](https://enterprise.github.com/releases/2.19.21/notes)
+ GitLab [13.4](https://about.gitlab.com/releases/2020/09/22/gitlab-13-4-released/),
[13.3.6](https://about.gitlab.com/releases/2020/09/14/gitlab-13-3-6-released/),
[13.3.5](https://about.gitlab.com/releases/2020/09/04/gitlab-13-3-5-released/),
[13.3.4](https://about.gitlab.com/releases/2020/09/02/security-release-gitlab-13-3-3-released/),
[13.3.2](https://about.gitlab.com/releases/2020/08/28/gitlab-13-3-2-released/),
[13.3.1](https://about.gitlab.com/releases/2020/08/25/gitlab-13-3-1-released/)
+ Bitbucket Server [7.6](https://confluence.atlassian.com/bitbucketserver/bitbucket-server-release-notes-872139866.html)
+ GitKraken [7.3.2](https://support.gitkraken.com/release-notes/current),
[7.3.1](https://support.gitkraken.com/release-notes/current),
[7.3.0](https://support.gitkraken.com/release-notes/current)
+ GitHub Desktop [2.5.5](https://desktop.github.com/release-notes/)

## Other News

__Events__

* The first [Git Contributors' Inclusion Summit](https://code.googlesource.com/git/summit/2020/+/main/index.md)
  happened on Monday, September 14th, and Tuesday, September 15th. It
  was attended by around 30 people. Some notes were taken but it's not
  clear if they are going to be publicly available.

__Various__

* [Set the default branch for newly-created GitHub repositories](https://github.blog/changelog/2020-08-26-set-the-default-branch-for-newly-created-repositories/)
  on GitHub Blog.  
  On **October 1, 2020**, if you haven't changed the default branch
  for new repositories for your user, organization, or enterprise on
  GitHub, it will automatically change from **`master`** to
  **`main`**.  You can opt out of this change at any time.  Existing
  repositories will continue to have the same default branch they have
  now.

* ['There is no way we can keep coding local': GitPod's cloud
  development platform released into sunlight of open source](https://www.theregister.com/2020/08/25/gitpod_open_sources_cloud_development_platform/) --
  _The Register_ chats with co-founder Sven Efftinge.

* [Discussions](https://lore.kernel.org/git/20200828065609.GA2105118@coredump.intra.peff.net/)
  have been going on about the Git project participating in the next
  [Outreachy](https://www.outreachy.org/) round. So far
  [3 projects](https://www.outreachy.org/apply/project-selection/#git)
  have been proposed.

__Light reading__

* Arista Networks, a Fortune 500 company, has rolled out mandatory
  commit signing across their Git repositories. Read about their
  journey at
  <https://eos.arista.com/commit-signing-with-git-at-enterprise-scale/>
  and learn about how they:
  * Manage code signing keys across a large company
  * Enforce that all commits are signed
  * Audit Git repositories to ensure that no unsigned commits are added.  

* Guillaume Papin in his development notes [on a compilation database](https://sarcasm.github.io/notes/dev/compilation-database.html)
  (a concept that includes, but is not limited to a [JSON Compilation Database](http://clang.llvm.org/docs/JSONCompilationDatabase.html))
  includes [section on Git](https://sarcasm.github.io/notes/dev/compilation-database.html#git)
  as one of (and at this time the only) case studies on open source projects.

  There is a patch by Philippe Blain to [add support for generating a JSON compilation database](https://lore.kernel.org/git/pull.714.git.1598815707540.gitgitgadget@gmail.com/t/#u)
  to Git's Makefile.  It is currently [merged into 'next'](https://github.com/git/git/commit/4f4cb66b091c1d87cd42e8a7905b479f3560b28b).

* Keith Peters writes how to create your own [Git-based Wiki](https://www.bit-101.com/blog/2020/09/git-based-wiki/)
  to save information that one might need later.  The idea is to make
  use of the fact that many Git hosting sites render Markdown on-line,
  by storing the data in interlinked Markdown files -- the article
  proposes the template to use.

* [Patterns for writing better git commit messages](https://dev.to/helderburato/patterns-for-writing-better-git-commit-messages-4ba0)
  by Helder Burato Berto, with references to other articles, and
  a [`git commit` template](https://github.com/helderburato/dotfiles/blob/master/git/.gittemplates/commit).

* [Learn Enough Git and Github to take part in the Weekly Challenge](https://dev.to/davorg/learn-enough-git-and-github-to-take-part-in-the-perl-weekly-challenge-gpm)
  by Dave Cross (**not** intended as "beginners guide to Git and Github").

* [Git Concepts and Workflow for Beginners](https://livecodestream.dev/post/2020-08-21-git-concepts-and-workflow-for-beginners/)
  by Juan Cruz Martinez on Live Code Stream.

__Git tools and sites__

* [ugit: DIY Git in Python](https://www.leshenko.net/p/ugit/#) is a
  tutorial to help learn about Git internals by building an
  implementation of Git in Python.

* [gitoxide](https://github.com/Byron/gitoxide) (`gix`) is a
  command-line interface (CLI) to access Git repositories. It's
  written to optimize the _user-experience_, and perform as _good or
  better than the canonical implementation_.

  It provides an idiomatic, lean, fast and safe pure Rust
  implementation of Git, and it also provides an easy and safe to use
  API in the form of various small crates for implementing your own
  tools.

* [grokmirror-2.0](https://lore.kernel.org/git/20200921170651.aszbydzvnj7l4y2w@chatter.i7.local/)
  is a Git mirroring software announced by Konstantin Ryabitsev on the
  Git mailing list. It was developed by kernel.org for their own use.

* [GitQlient](https://github.com/francescmm/GitQlient), pronounced as
  git+client (_/gɪtˈklaɪənt/_), is a multi-platform Git client written
  with Qt, originally forked from [QGit](https://github.com/tibirna/qgit).

  Related project is [GitQlientPlugin](https://github.com/francescmm/GitQlientPlugin),
  the project to build an integrated QtCreator plugin of GitQlient.

* [Graphtage: A New Semantic Diffing Tool](https://blog.trailofbits.com/2020/08/28/graphtage/)
  is a command line utility and underlying library for semantically
  comparing and merging tree-like structures such as JSON, JSON5, XML,
  HTML, YAML, and TOML files.  You can even compare files that are in
  two different formats.  When paired with the [PolyFile tool](https://blog.trailofbits.com/2019/11/01/two-new-tools-that-tame-the-treachery-of-files/)
  you can semantically diff arbitrary file formats.

* [Sourcetrail](https://www.sourcetrail.com/) is a free and
  [open-source](https://github.com/CoatiSoftware/Sourcetrail)
  cross-platform interactive source explorer, that helps you get
  productive on unfamiliar source code.  It currently supports
  C, C++, Java and Python.
  
* [`git-in`](https://gist.github.com/phil-blain/d350e91959efa6e7afce60e74bf7e4a8) is 
  a small Python script to import a message or an entire thread from a mailing list 
  to an IMAP mailbox. Very useful when you are **not** subscribed to the list but want to answer 
  an email from the list, while being be able to quote parts of the message.

## Credits

This edition of Git Rev News was curated by
Christian Couder &lt;<christian.couder@gmail.com>&gt;,
Jakub Narębski &lt;<jnareb@gmail.com>&gt;,
Markus Jansen &lt;<mja@jansen-preisler.de>&gt; and
Kaartic Sivaraam &lt;<kaartic.sivaraam@gmail.com>&gt;
with help from Ethan Rahn, Philippe Blain and Junio Hamano.
