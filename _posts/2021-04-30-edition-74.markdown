---
title: Git Rev News Edition 74 (April 30th, 2021)
layout: default
date: 2021-04-30 12:06:51 +0100
author: chriscool
categories: [news]
navbar: false
---

## Git Rev News: Edition 74 (April 30th, 2021)

Welcome to the 74th edition of [Git Rev News](https://git.github.io/rev_news/rev_news/),
a digest of all things Git. For our goals, the archives, the way we work, and how to contribute or to
subscribe, see [the Git Rev News page](https://git.github.io/rev_news/rev_news/) on [git.github.io](http://git.github.io).

This edition covers what happened during the month of March 2021.

## Discussions

<!---
### General
-->

<!---
### Reviews
-->

### Support

* [`--no-edit` not respected after conflict](https://lore.kernel.org/git/4442fd0a-3306-a22b-3614-e3272f8f0be5@FreeBSD.org/)

  Renato Botelho explained in an email to the mailing list that while he
  was reverting multiple commits using the `--no-edit` option, there
  was a conflict he resolved using
  [`git mergetool`](https://git-scm.com/docs/git-mergetool). After that
  though, the revert was not respecting the `--no-edit` option anymore
  for the next commits, so for each of them an editor was opened for him
  to review the commit messages.

  After brian m. carlson replied to him asking for the set of commands
  he used or a reproduction test case, Renato provided a test case
  which shows that indeed after `git revert --continue` the
  `--no-edit` option, that was provided in the initial
  `git revert --no-edit commit1 commit2 ... commitN` command, doesn't
  seem to be taken into account anymore.

  Elijah Newren thanked Renato, confirmed he could reproduce the issue
  and said he started working on a patch that fixed the issue as well
  as a similar one he had found. The next day though Elijah replied to
  himself saying the issue turned out to be messier than expected.

  He [provided tables](https://lore.kernel.org/git/CABPp-BEGEcws69sg6Z2=B1nihFG227mAsSx=boU3uSx2xDUEjg@mail.gmail.com/)
  showing that the behavior (launching an editor or
  not) could depend on a number of factors: the command (`revert` or
  `cherry-pick`), the use of a terminal or not, before or after a
  conflict, which option (`--edit`, `--no-edit` or no option) had been
  passed. The tables also showed that Elijah had some doubts in some
  cases.

  Elijah for example was not sure what should be done after a conflict
  when neither `--edit` nor `--no-edit` had been specified and when there
  was no terminal. It was not clear if an editor should be launched as
  it was likely to fail if there was no terminal.

  Junio Hamano, the Git maintainer, replied to Elijah saying that
  when there is a conflict and when reverting (instead of
  cherry-picking), the default (that is, `--no-edit` is not provided)
  should be to give the user a chance to explain the conflict
  resolution or the reason for reverting in the commit message. If
  there is no terminal though, the process is likely automated and
  launching an editor might fail the operation for no good reason.

  Elijah then thanked Junio, sent a proper
  [patch](https://lore.kernel.org/git/pull.988.git.git.1616742969145.gitgitgadget@gmail.com/)
  to the mailing list fixing the issue and asked Renato to give it a
  try. Renato replied that the patch worked indeed and thanked Elijah.

  Philip Oakley and Phillip Wood first replied to Elijah's patch,
  which was quite complex, with only minor comments. Elijah and Junio
  both replied to their comments. Then Elijah sent a
  [version 2 of his patch](https://lore.kernel.org/git/pull.988.v2.git.git.1617070174458.gitgitgadget@gmail.com/)
  that only included typo fixes and comment clarifications to address
  Philip's and Phillip's suggestions.

  Johannes Schindelin, alias Dscho, replied to this new version of the
  patch. He first said, as a tangent, that we should move away from
  the "Unix shell script heritage", especially what he called "the
  awful _let's write out one file per setting_ strategy". He would
  like the project to use the JSON or the INI (like Git's own config
  files) format instead. He recognized that it might not be an easy
  switch though, as some users might unfortunately rely too much on
  such implementation details.

  Dscho also made a number of small code suggestions. One was about
  how the variable encoding of the edit related options is
  checked. Another one was to get rid of an `assert()` statement that
  Elijah's patch introduced. While Elijah agreed with the first one,
  he disagreed about the second, which started a small discussion
  about the value of `assert()` between Elijah, Junio and Dscho, with
  Ævar Arnfjörð Bjarmason chiming in. Elijah eventually suggested
  replacing the `assert()` statements using a new `BUG_ON()` macro.

  About Dscho's tangent that we should stop writing one file per
  setting and use a standard format instead, Elijah said he was glad
  talking about this because it generates a number of issues. Some of
  these issues are related to the different control structures and
  code duplication for different operations (like `git cherry-pick`
  and `git rebase`) because of the differences in writing the
  settings.

  Another issue is some wasted time in the sequencer (which is used by
  both `git cherry-pick` and `git rebase`). There is unnecessary
  process forking and a lot of useless disk writing (to update the
  index and the working directory but also to write all the individual
  control files). This started a sub-thread where Dscho, Phillip Wood,
  Junio and Elijah discussed if it was actually necessary to often
  write many small files to disk. The conclusion seemed to be that we
  would need to check if some hooks are configured or not, so that if
  they are not, we can avoid writing a lot between each commit which
  is processed. Dscho said that "for example, if no `pre-commit` hook
  was installed that needs to be run, there was no need to update the
  worktree nor HEAD until the rebase is done".

  Meanwhile Elijah sent a
  [version 3 of his patch](https://lore.kernel.org/git/pull.988.v3.git.git.1617173541301.gitgitgadget@gmail.com/)
  that took into account all the suggestions Dscho had made, including the
  removal of the `assert()` statement. Dscho gave his "Reviewed-by:" and
  the patch has since been merged into the 'master' branch.


## Developer Spotlight: Yann Dirson

* Who are you and what do you do?

  I'm Yann, and for the last few years I've been working on the Blade/Shadow
  "stream a Gaming PC" service, and currently looking for the next adventure.

* What would you name your most important contribution to Git?

  I can't say that one particular thing stands out by itself.  In volume
  I certainly contributed more to "third-party" tools: [Cogito][1]
  initially, then [StGit][2] (which I'm happy to see has recently received
  more activity and a 1.0 release), then more recently
  [git-reintegrate][3].  In git.git, I've mostly contributed small patches
  here and there when it itched too much, and a number of bug reports and
  suggestions.

[1]: https://en.wikipedia.org/wiki/Cogito_(software)
[2]: https://stacked-git.github.io/
[3]: https://github.com/felipec/git-reintegrate

* What are you doing on the Git project these days, and why?

  I've been mostly dormant there lately, and I've been a happy user all
  that time, both in dayjob and in personnal projects.  To me that tells
  a lot on the maturity of the project.

  I've started to feel a new itch regarding `git rebase -i`, when iterative work
  requires to go back-and-forth between patches before finishing the rebase
  (something StGit did quite well, and possibly something most users don't need).
  I only posted a PoC and some ideas a [couple of weeks ago][4], and that's
  likely to be my next venture into Git if time allows.

[4]: https://lore.kernel.org/git/139173043.431119331.1615653441685.JavaMail.root@zimbra39-e7/

* If you could get a team of expert developers to work full time on
  something in Git for a full year, what would it be?

  On my first contact with Git shortly after Linus published his first
  version, one thing stood out for me as non-intuitive after using all
  those former tools: the "record only the content and not by which
  operation we got there" motto, which leaves to `git diff` the work of
  reconstructing the "which operation" part.  Yet, soon after it struck
  me as probably the most brilliant aspect in Git's design.

  Today there are a handful of such operations that Git can detect, and
  then use when merging to make things easier: essentially renames and
  copies.  Yet, so many other high-level operations can be made on code,
  and are not easy enough to merge: code restructuring inducing
  reindents (think Python) and symbol renaming are the first that come
  to mind.

  This probably should be done as language-specific diff/merge tools,
  but those tools would likely want to share a common core.  Providing
  such support would likely help many projects, and enable smoother
  workflows.

* If you could remove something from Git without worrying about
  backwards compatibility, what would it be?

  The current `git rebase` syntax, which feels so counter-intuitive today.

* What is your favorite Git-related tool/library, outside of Git
  itself?

  Recently the tool that has helped me most is [git-reintegrate][3], it
  simplifies so much the iterative integration process with WiP
  branches.  It still has a couple of rough edges, but as long as
  you don't use submodules and don't have to hand over the integration
  task to others too often, it runs really smoothly.

## Releases

+ Git [2.31.1](https://lore.kernel.org/git/xmqq1rc1sf2z.fsf@gitster.g/),
+ Git for Windows [2.31.1(1)](https://github.com/git-for-windows/git/releases/tag/v2.31.1.windows.1)
+ GitHub Enterprise [3.0.5](https://help.github.com/enterprise-server@3.0/admin/release-notes#3.0.5),
[2.22.11](https://help.github.com/enterprise-server@2.22/admin/release-notes#2.22.11),
[2.21.19](https://help.github.com/enterprise-server@2.21/admin/release-notes#2.21.19),
[3.0.4](https://help.github.com/enterprise-server@3.0/admin/release-notes#3.0.4),
[2.22.10](https://help.github.com/enterprise-server@2.22/admin/release-notes#2.22.10),
[2.21.18](https://help.github.com/enterprise-server@2.21/admin/release-notes#2.21.18),
[3.0.3](https://docs.github.com/en/enterprise-server@3.0/admin/release-notes#3.0.3),
[2.22.9](https://help.github.com/enterprise-server@2.22/admin/release-notes#2.22.9),
[2.21.17](https://help.github.com/enterprise-server@2.21/admin/release-notes#2.21.17)
+ GitLab [13.11.1](https://about.gitlab.com/releases/2021/04/23/gitlab-13-11-1-released/),
[13.11](https://about.gitlab.com/releases/2021/04/22/gitlab-13-11-released/),
[13.10.3, 13.9.6, and 13.8.8](https://about.gitlab.com/releases/2021/04/14/security-release-gitlab-13-10-3-released/),
[13.10.2](https://about.gitlab.com/releases/2021/04/01/gitlab-13-10-2-released/),
[13.10.1, 13.9.5, and 13.8.7](https://about.gitlab.com/releases/2021/03/31/security-release-gitlab-13-10-1-released/)
+ Bitbucket Server [7.12](https://confluence.atlassian.com/bitbucketserver/bitbucket-server-release-notes-872139866.html)
+ Gerrit Code Review [3.3.3](https://www.gerritcodereview.com/3.3.html#333),
[3.2.8](https://www.gerritcodereview.com/3.2.html#328),
[3.1.13](https://www.gerritcodereview.com/3.1.html#3113)
+ GitKraken [7.5.5](https://support.gitkraken.com/release-notes/current),
[7.5.4](https://support.gitkraken.com/release-notes/current),
[7.5.3](https://support.gitkraken.com/release-notes/current)
+ GitHub Desktop [2.7.2](https://desktop.github.com/release-notes/),
[2.7.1](https://desktop.github.com/release-notes/),
[2.7.0](https://desktop.github.com/release-notes/)
+ TortoiseGit [2.12.0](https://tortoisegit.org/docs/releasenotes/#Release_2.12.0.0)

## Other News

__Events__

* [GitHub is announcing the Global Maintainer Summit](https://github.blog/2021-04-06-announcing-the-global-maintainer-summit/)
  on June 8--9th.


__Various__

* [Technology internships meet open source in Outreachy](https://about.gitlab.com/blog/2021/04/15/outreachy-sponsorship-winter-2020/)
  on GitLab's blog is about recent Outreachy interns working on Git.
* [Enhanced Productivity with Git in Visual Studio](https://devblogs.microsoft.com/visualstudio/enhanced-productivity-with-git-in-visual-studio/)
  (in upcoming version 16.10).


__Light reading__

* [Optimizing git’s merge machinery, #3](https://blog.palantir.com/optimizing-gits-merge-machinery-3-2dc7c7436978)
  by Elijah Newren on Palantir Blog.
* [A look under the hood: how branches work in Git](https://stackoverflow.blog/2021/04/05/a-look-under-the-hood-how-branches-work-in-git/)
  by Tobias Günther on The Overflow -- the Stack Overflow blog.
* [Experiment on your code freely with Git worktree](https://opensource.com/article/21/4/git-worktree)
  by Seth Kenlon (Red Hat) on Opensource.com.
* [5 commands to level-up your Git game](https://opensource.com/article/21/4/git-commands):
  `git whatchanged`, `git stash`, `git worktree`, `git cherry-pick` and
  [managing `$HOME` with Git](https://opensource.com/article/21/4/git-home),
  by Seth Kenlon (Red Hat) on Opensource.com.
* [A practical guide to using the `git stash` command](https://opensource.com/article/21/4/git-stash)
  by Ramakrishna Pattnaik on Opensource.com.
* [Scanning for secrets](https://lwn.net/Articles/851670/) in Git repositories
  automatically, by Jake Edge on LWN.net.
* [How we ship code faster and safer with feature flags](https://github.blog/2021-04-27-ship-code-faster-safer-feature-flags/)
  by Alberto Gimeno on GitHub Blog.
  * [Feature flags](https://featureflags.io/) were one of solutions to hiding partial features
    in [trunk based development](https://trunkbaseddevelopment.com/), one of the
    [patterns for managing source code branches](https://martinfowler.com/articles/branching-patterns.html#continuous-integration)
    in Martin Fowler's article of the same name, covered in
    [Git Rev News Edition #63](https://git.github.io/rev_news/2020/05/28/edition-63/)
    and mentioned in [#73](https://git.github.io/rev_news/2021/03/27/edition-73/).
* [How to Set Up Continuous Integration for a Monorepo Using Buildkite](https://www.freecodecamp.org/news/how-to-set-up-continuous-integration-for-monorepo-using-buildkite/)
  by Subash Adhikari on freeCodeCamp.
* [How to Use Git and Git Workflows -- a Practical Guide](https://www.freecodecamp.org/news/practical-git-and-git-workflows/)
  by John Mosesman on freeCodeCamp.
* [Improving shell workflows with fzf](https://seb.jambor.dev/posts/improving-shell-workflows-with-fzf/)
  by Sebastian Jambor.  The [fzf](https://github.com/junegunn/fzf) tool was mentioned
  alongside [git-fuzzy](https://github.com/bigH/git-fuzzy) (that uses it) in
  [Git Rev News Edition #64](https://git.github.io/rev_news/2020/06/25/edition-64/).
* [Git email flow vs GitHub flow](https://blog.brixit.nl/git-email-flow-versus-github-flow/):
  Comparing the GitHub and GitLab pull request workflow to the Git built-in email workflow,
  by Martijn Braam (2020).


__Git tools and sites__

* [posh-git](http://dahlbyk.github.io/posh-git/) is a PowerShell module
  which provides Git/PowerShell integration.  It also provides tab completion
  support for common Git commands, branch names, paths, and more.


## Credits

This edition of Git Rev News was curated by
Christian Couder &lt;<christian.couder@gmail.com>&gt;,
Jakub Narębski &lt;<jnareb@gmail.com>&gt;,
Markus Jansen &lt;<mja@jansen-preisler.de>&gt; and
Kaartic Sivaraam &lt;<kaartic.sivaraam@gmail.com>&gt;
with help from Yann Dirson, Elijah Newren and Sven Strickroth.
