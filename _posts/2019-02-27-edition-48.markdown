---
title: Git Rev News Edition 48 (February 27th, 2019)
layout: default
date: 2019-02-27 12:06:51 +0100
author: chriscool
categories: [news]
navbar: false
---

## Git Rev News: Edition 48 (February 27th, 2019)

Welcome to the 48th edition of [Git Rev News](https://git.github.io/rev_news/rev_news/),
a digest of all things Git. For our goals, the archives, the way we work, and how to contribute or to
subscribe, see [the Git Rev News page](https://git.github.io/rev_news/rev_news/) on [git.github.io](http://git.github.io).

This edition covers what happened during the month of January 2019.
It also covers the Git Contributor Summit and the Git
Merge conference that took place on January 31th and February 1st.

## Discussions

### General

* Git Merge 2019 — General Sessions

  The [Git Merge](https://git-merge.com/) 2019 conference took place in Brussels, Belgium
  on January 31st (workshops and contributor summit) and February 1st (main conference day).

  * This year a big theme was handling large Git repositories,
    both from technical and organizational point of view

    * Ivan Frade and Minh Thai in _"Tales in scalability: how Google has seen users break Git"_
      talked about solving problems with Android (many repos, huge binary assets, many commits)
      and Chromium monorepo (many unique commiters).  Some of the problems were caused by legacy
      practices of trying to keep Subversion-like monotonic version number -- it turned out
      that attempts to provide it got into troubles and were cause of much of churn.  Another
      problem was the change in Gerrit, which now stores patch history in git repo, resulting
      in "forest of tiny bushes" graph of commits; the solution here was moving to protocol v2.
      There was also talk about making the negotiation phase during fetch faster at the cost
      of somewhat bigger data transfer, e.g. by skipping commits using Fibonacci number gaps.

    * Johan Abildskov, a consultant at Praqma in _"The what, how and why of scaling repositories"_
      talked about how to choose between monorepos and many-repos (and how to split the codebase
      into repositories).  The major idea was to not ignore the real problems (like having to
      create multiple commits to handle single bug), and to base decision on data

      > Our conclusions are not better than our data

      For this reason the [git-metrics](https://github.com/Praqma/git-metrics) tool was created,
      which is a set of util scripts to scrape data from git repositories to help teams improve.

    * Brandon Williams from Facebook gave a lightning talk _"Git protocols: still tinkering after all these years?"_
      focusing on introduction of protocol v2 to reduce communication overhead (especially important
      for repositories with large number of branches and tags) and increase extensibility, and troubles
      with adding it while maintaining all-important backwards compatibility.

    * Terry Parker from Google gave a lightning talk _"Native Git support for large objects"_
      explain how Git’s new partial clone feature (where only a subset of objects,
      selected by initial filter, e.g. `--filter=blob:limit=1m`, is downloaded on clone;
      the rest are fetched on demand, as needed) and the new proposal to use content distribution networks
      (CDN) can help with handling repositories with large files.

    * John Briggs from Microsoft in _"Technical contributions towards scaling for Windows"_
	  talked about both technical improvements in Git, like serialized commit graph (with
	  generation numbers) and multipack index (`*.midx`), and the "sparse" object walk
	  during push that is being worked on (see the ["Reviews"](#reviews) section), and
	  improvements in VFS for Git (formerly called GVFS), like prefetching in background
	  and git status serialization.  He also announced that VFS for Git will be ported
	  to other platforms: MacOS and Linux (to handle MS Office, which itself is cross-platform
	  project).

  * John Austin, game studio technical lead from A Stranger Gravity and Funomena
    in _"Git for games: current problems and solutions"_ talked about major problem
    with using Git in game development workflows, namely many and large binary files,
    for which file conflicts are lost work (minor change, like adding voiceover
    or changing equalizer settings results in large changes to files).  File locking
    is one possibility, but it doesn't play nicely with Git -- it is inherently centralized.
    He introduces a new tool, [Git Global Graph](https://github.com/Kleptine/gitglobalgraph)
    (a work in progress), which can be used to check at commit time if it wouldn't
    create a divergent version of a file.  The idea is that there should be only
    a single path through commit graph with changes to binary files.

  * Javier Fontan from source{d} gave a lightning talk _"Gitbase, SQL interface to Git repositories"_
    about [gitbase](https://github.com/src-d/gitbase) tool, which provides read-only
    SQL interface to Git repositories (with Abstract Syntax Tree support).

  * Brian M. Carlson, Git Ecosystem Engineer at GitHub in _"Bridging the gap: transitioning Git to SHA-256"_
    talked about ongoing work to transition from SHA-1, which is considered weak,
    to SHA-256, which is more secure: the transition plan, where we are with it,
    and how to provide interoperability between versions of Git using different hash algorithms.

  * Belén Barros Pena, PhD student and interaction designer, gave talk
    _"The art of patience: why you should bother teaching Git to designers"_,
	where she also described _how_ to do it and provide good retention, namely:

    1. Show things on a need-to-know basis
    2. Avoid the Git jargon
    3. Don't bother too much with the concepts;
       will be grasped through practice
    4. Do things with, never for, your designer
    5. Designer should take notes and keep cheat sheet
    6. Teach command--line Git

  * Veronica Hanus in _"Version control for visual learners"_
    talked about how to enter visual representations of recently-changed elements into version control
    in the form of screenshot diffing.


### Reviews

* [Add a new "sparse" tree walk algorithm](https://public-inbox.org/git/pull.89.git.gitgitgadget@gmail.com/)

Last November Derrick Stolee, who prefers to be called just Stolee,
sent a patch series to the mailing list to speed up `git push`
operations by implementing and using a new "sparse" tree walk
algorithm.

Stefan Beller wondered how users can know about this new algorithm and
if it should be turned on by default for users. Stolee replied that
indeed "we should actually make the config setting true by default,
and recommend that servers opt-out".

Junio Hamano, the Git maintainer, disagreed saying that we should wait
until "enough users complain that they have to turn it on" before we
turn it on by default.

Stolee later sent a [version 2 of the patch series](https://public-inbox.org/git/pull.89.v2.git.gitgitgadget@gmail.com/)
improving the tests, then a [version 3](https://public-inbox.org/git/pull.89.v3.git.gitgitgadget@gmail.com/)
improving the documentation, and a [version 4](https://public-inbox.org/git/pull.89.v4.git.gitgitgadget@gmail.com/)
with a few code and commit message improvements.

Junio and Stolee discussed how the `mark_trees_uninteresting_sparse()`
function is implemented in the first patch, and how a variable is
named in this function.

They also discussed the purpose of patches 2 and 3 and agreed that
they should be merged and what the related tests should do.

Additionally, Junio suggested a number of small code improvements in the last
patch. Especially he suggested to get rid of a global variable that
was unused. Ramsay Jones, who regularly uses the `sparse` tool and his
own `static-check.pl` script on the Git code base to find errors, had
also found this unused variable separately.

Ævar Arnfjörð Bjarmason chimed in to ask for a clarification about
which step the patch speeds up, and if a progress bar should be added
while the user is waiting during this step, and how this step should
be named on the command line interface. It seems though that some
preliminary work would be needed to untangle the steps during which a
progress bar is already displayed.

Stolee eventually sent a [version 5 of the patch series](https://public-inbox.org/git/pull.89.v5.git.gitgitgadget@gmail.com/)
on January 16th which has since been merged and is in the recently
released Git v2.21.0.

<!---
### Support
-->

<!---
## Developer Spotlight:
-->

## Releases

+ Git [2.21.0](https://public-inbox.org/git/xmqqtvgtkq46.fsf@gitster-ct.c.googlers.com/),
[2.21.0-rc2](https://public-inbox.org/git/xmqq8sybz7b2.fsf@gitster-ct.c.googlers.com/),
[2.21.0-rc1](https://public-inbox.org/git/xmqq8syj9h9b.fsf@gitster-ct.c.googlers.com/),
[2.21.0-rc0](https://public-inbox.org/git/xmqqh8dgqcqn.fsf@gitster-ct.c.googlers.com/)
+ Git for Windows [2.21.0(1)](https://github.com/git-for-windows/git/releases/tag/v2.21.0.windows.1)
+ libgit2 [0.28.1](https://github.com/libgit2/libgit2/releases/tag/v0.28.1),
[0.28.0](https://github.com/libgit2/libgit2/releases/tag/v0.28.0),
[0.27.8](https://github.com/libgit2/libgit2/releases/tag/v0.27.8)
+ libgit2sharp [0.26](https://github.com/libgit2/libgit2sharp/releases/tag/v0.26)
+ GitHub Enterprise [2.16.3](https://enterprise.github.com/releases/2.16.3/notes),
[2.15.8](https://enterprise.github.com/releases/2.15.8/notes),
[2.14.15](https://enterprise.github.com/releases/2.14.15/notes),
[2.13.21](https://enterprise.github.com/releases/2.13.21/notes),
[2.16.2](https://enterprise.github.com/releases/2.16.2/notes),
[2.15.7](https://enterprise.github.com/releases/2.15.7/notes),
[2.14.14](https://enterprise.github.com/releases/2.14.14/notes),
[2.13.20](https://enterprise.github.com/releases/2.13.20/notes),
[2.16.1](https://enterprise.github.com/releases/2.16.1/notes),
[2.15.6](https://enterprise.github.com/releases/2.15.6/notes),
[2.14.13](https://enterprise.github.com/releases/2.14.13/notes),
[2.13.19](https://enterprise.github.com/releases/2.13.19/notes)
+ GitLab [11.8](https://about.gitlab.com/2019/02/22/gitlab-11-8-released/),
[11.7.5](https://about.gitlab.com/2019/02/07/gitlab-11-7-5-released/),
[11.7.4](https://about.gitlab.com/2019/02/05/critical-security-release-gitlab-11-dot-7-dot-4-released/),
[11.7.3](https://about.gitlab.com/2019/01/31/security-release-gitlab-11-dot-7-dot-3-released/)
+ Bitbucket Server [6.0](https://confluence.atlassian.com/bitbucketserver/bitbucket-server-release-notes-872139866.html)
+ Gerrit Code Review [2.15.11](https://www.gerritcodereview.com/2.15.html#21511),
[2.16.5](https://www.gerritcodereview.com/2.16.html#2165),
[2.15.10](https://www.gerritcodereview.com/2.15.html#21510),
[2.16.4](https://www.gerritcodereview.com/2.16.html#2164),
[2.15.9](https://www.gerritcodereview.com/2.15.html#2159)
+ GitKraken [4.2.2](https://support.gitkraken.com/release-notes/current),
[4.2.1](https://support.gitkraken.com/release-notes/current),
[4.2.0](https://support.gitkraken.com/release-notes/current),
[4.1.1](https://support.gitkraken.com/release-notes/current),
[4.1.0](https://support.gitkraken.com/release-notes/current),
[4.0.6](https://support.gitkraken.com/release-notes/current),
[4.0.5](https://support.gitkraken.com/release-notes/current),
[4.0.4](https://support.gitkraken.com/release-notes/current),
[4.0.3](https://support.gitkraken.com/release-notes/current),
[4.0.2](https://support.gitkraken.com/release-notes/current),
[4.0.1](https://support.gitkraken.com/release-notes/current),
[4.0.0](https://support.gitkraken.com/release-notes/current)
+ GitHub Desktop [1.6.2](https://desktop.github.com/release-notes/),
[1.6.1](https://desktop.github.com/release-notes/)
+ Sourcetree [3.1](https://product-downloads.atlassian.com/software/sourcetree/ReleaseNotes/Sourcetree_3.1.html)

## Other News

__Various__

* [GSoC 2019: Git's application submitted](https://public-inbox.org/git/20190204215251.GB6085@hank.intra.tgummerer.com/T/)
  and [got accepted](https://summerofcode.withgoogle.com/organizations/6104737735245824/) as one of [207 open source projects](https://opensource.googleblog.com/2019/02/gsoc-2019-organizations.html);
  ideas for project proposals [published](https://git.github.io/SoC-2019-Ideas/)

* The Git Contributor Summit 2019 happened on January 30th in Brussels. Elijah
  Newren took some [notes](https://public-inbox.org/git/CABPp-BGfSRy-NT+f39gSumD9haYZPAnpNPY-VnanioCbdYFoEQ@mail.gmail.com/).
  A video stream of the event was broadcast and recorded, but is not
  yet available for download.

* The [Git Merge Conference 2019](https://git-merge.com/) happened on
  February 1st in Brussels. Videos of the presentations are not yet
  available. The GitHub team expects them to be available
  [before the end of this month](https://public-inbox.org/git/20190221082218.GA3335@sigill.intra.peff.net/).
  - A short [Mission report: Git Merge 2019](https://github.blog/2019-02-12-mission-report-git-merge-2019/) was posted on GitHub blog.

* [GerritHub.io multi-site plugin is going public](https://groups.google.com/forum/#!topic/repo-discuss/A9dGOppvgGA) and has
  been proposed to be hosted on gerrit-review.googlesource.com. That is going to be the first globally available Open Source
  implementation for having [Gerrit Code Review](https://www.gerritcodereview.com) masters replicated and synchronized over multiple sites.

__Light reading__

* [gitgeist: a git-based social network proof of concept](https://www.karimyaghmour.com/blog/2019/02/gitgeist-a-git-based-social-network-proof-of-concept.html) by Karim Yaghmour
  (mentioned [on LWN.net](https://lwn.net/Articles/780365/)).

* [France enters the Matrix [LWN.net]](https://lwn.net/Articles/779331/) by Tom Yates
  covers Matthew Hodgson talk about [Matrix](https://matrix.org/blog/home/) at [FOSDEM 2019](https://fosdem.org/2019/);
  Matrix is an open standard and lightweight protocol for real-time communication,
  allowing to create decentralized federated instant messenging system with end-to-end encryption;
  the video of the whole talk [is available](https://fosdem.org/2019/schedule/event/matrix_french_state/).

  > [...] the "first-class citizen" in Matrix is not the message, but
  > the conversation history of the room. That history is stored in a
  > big data structure that is replicated across a number of
  > participants; in that respect, said Hodgson, Matrix is *more like
  > Git* than XMPP, SIP, IRC, or many other traditional communication
  > protocols.

* [./hacker-tools lectures: Version Control](https://hacker-tools.github.io/version-control/),
  focusing on Git (article with an embedded 53 minutes video).

* [An open source parser for GitHub Actions](https://githubengineering.com/an-open-source-parser-for-github-actions/)
  on GitHub Engineering Blog
  ([GitHub Actions](https://github.com/features/actions) were covered in
  [Git Rev News #44](https://git.github.io/rev_news/2018/10/24/edition-44/)).

* [Snowpatch: continuous-integration testing for the kernel [LWN.net]](https://lwn.net/Articles/777421/)
  by Jonathan Corbet.  [Snowpatch](https://github.com/ruscur/snowpatch)
  (mentioned in [Git Rev News Edition #40](https://git.github.io/rev_news/2018/06/20/edition-40/))
  is built on top of [patchwork](http://jk.ozlabs.org/projects/patchwork/)
  (mentioned in [Git Rev News Edition #20](https://git.github.io/rev_news/2016/10/19/edition-20/)).


__Git tools and sites__

* [git-history](https://github.com/pomber/git-history) is a web-based tool (for Node.js)
  to quickly browse the history of a file from any GitHub repository.
  ([GitLab and Bitbucket support is also planned](https://github.com/pomber/git-history/issues/14));
  unfortunately the [demo service](https://github.githistory.xyz/babel/babel/blob/master/packages/babel-core/test/browserify.js)
  at <https://githistory.xyz/> [was down](https://twitter.com/pomber/status/1100412811455287304) at the time of publishing this edition,
  causing [Chrome](https://chrome.google.com/webstore/detail/github-history-browser-ex/laghnmifffncfonaoffcndocllegejnf) and [Firefox](https://addons.mozilla.org/firefox/addon/github-history/) extensions,
  which add an _Open in Git History_ button to GitHub, not to work either.

* [gitgeist-poc](https://github.com/opersys/gitgeist-poc) by Francois-Denis Gonthier
  is a Proof-of-Concept implementation  of
  [gitgeist: a git-based social network proof of concept](https://www.karimyaghmour.com/blog/2019/02/gitgeist-a-git-based-social-network-proof-of-concept.html) idea.

* [Git Gud](https://nic-hartley.github.io/git-gud/) is a pretty
  barebone visual web-based Git simulator, meant to help understand
  Git better, which got announced by its author Nic Hartley in
  [Git Gud at git](https://dev.to/nichartley/git-gud-at-git-5d9k);
  quite similar to [Learn Git Branching](https://learngitbranching.js.org/)
  service (covered in [Git Rev News Edition #30](https://git.github.io/rev_news/2017/08/16/edition-30/#other-news)).

* [GitLens — Git supercharged](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)
  extension supercharges the Git capabilities built into Visual Studio Code.

* [github-spray](https://github.com/Annihil/github-spray) is yet another tool
  to draw on your GitHub contribution graph; there is also
  [GitHub Spray Generator](https://annihil.github.io/github-spray-generator/) service.

* [gitbase](https://github.com/src-d/gitbase) from source{d} is a tool (in alpha) providing
  [SQL interface to Git repositories](https://docs.sourced.tech/gitbase), written in Go.
  It is part of [source{d} Engine](https://sourced.tech/engine), and implements MySQL wire protocol.
  Uses [go-git](https://github.com/src-d/go-git) for accessing Git repositories,
  [go-mysql-server](https://github.com/src-d/go-mysql-server) for the SQL engine implementation,
  [enry](https://github.com/src-d/enry) for programming language detection for files,
  and [bblfhs](https://github.com/bblfsh) for source code parsing into AST (Abstract Syntax Tree).
  There is also a [web client](https://github.com/src-d/gitbase-web) for it.

* [Gitana](http://modeling-languages.com/gitana-a-sql-based-git-repository-inspector/): a SQL-based Project Activity Inspector,
  written in Python ([GitHub reposiotory](https://github.com/SOM-Research/Gitana)),
  was mentioned in [Git Rev News Edition #7](https://git.github.io/rev_news/2015/09/09/edition-7/#other-news).
  Nowadays it imports and digests the data of Git repositories, issue trackers (including Bugzilla and GitHub),
  Q&amp;A web-sites (including forums and StackOverflow) and instant messaging services to a relational database
  in order to ease browsing and querying activities with standard SQL syntax and tools.


## Credits

This edition of Git Rev News was curated by
Christian Couder &lt;<christian.couder@gmail.com>&gt;,
Jakub Narębski &lt;<jnareb@gmail.com>&gt;,
Markus Jansen &lt;<mja@jansen-preisler.de>&gt; and
Gabriel Alcaras &lt;<gabriel.alcaras@telecom-paristech.fr>&gt;
with help from David Pursehouse and Luca Milanesio.
