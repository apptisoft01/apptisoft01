---
title: Git Rev News Edition 49 (March 20th, 2019)
layout: default
date: 2019-03-20 12:06:51 +0100
author: chriscool
categories: [news]
navbar: false
---

## Git Rev News: Edition 49 (March 20th, 2019)

Welcome to the 49th edition of [Git Rev News](https://git.github.io/rev_news/rev_news/),
a digest of all things Git. For our goals, the archives, the way we work, and how to contribute or to
subscribe, see [the Git Rev News page](https://git.github.io/rev_news/rev_news/) on [git.github.io](http://git.github.io).

This edition covers what happened during the month of February 2019.

## Discussions

<!---
### General
-->

### Reviews

* [test-lib: make '\-\-stress' more bisect-friendly](https://public-inbox.org/git/20190208115045.13256-1-szeder.dev@gmail.com/)

  `--stress` is an option that can be passed to a test script from the
  Git test suite to try to reproduce rare failures in the test script
  by running it many times in parallel.

  Gábor Szeder had initially implemented this option starting
  [last December](https://public-inbox.org/git/20181204163457.15717-1-szeder.dev@gmail.com/)
  based on [a script](https://github.com/peff/git/blob/meta/stress)
  that Jeff King, alias Peff, had developed and
  [mentioned](https://public-inbox.org/git/20181122161722.GC28192@sigill.intra.peff.net/)
  on the mailing list.

  That first iteration had been reviewed by Peff, Ævar Arnfjörð
  Bjarmason and Junio Hamano, and was followed by a
  [second iteration](https://public-inbox.org/git/20181209225628.22216-1-szeder.dev@gmail.com/)
  also reviewed by Peff.

  A [third](https://public-inbox.org/git/20181230191629.3232-1-szeder.dev@gmail.com/) and
  [fourth](https://public-inbox.org/git/20190105010859.11031-1-szeder.dev@gmail.com/)
  iteration were sent with only minor changes. The latter then got merged last January,
  so the feature was released in Git 2.21.0.

  On February 8th Gábor sent a patch to improve on top of his previous
  work on `--stress`. The goal was to make it easier to use the
  `--stress` along with `git bisect` to find the first commit that
  introduced a test failure when the test failure is not easy to
  reproduce.

  Specifically, the patch was addressing two issues with
  `--stress`. The first one is that `--stress` runs the test script
  endlessly when the test doesn't fail. This is fixed with a new
  `--stress-limit=<N>` option "to repeat the test script at most N
  times in each of the parallel jobs, and exit with success when the
  limit is reached".

  The second issue is that when the test script used with `--stress`
  fails, it exits with a success error code. This is addressed by
  making it exit with a failure error code in this case.

  With the improvement, it is possible to automatically find the
  commit that introduced a flakiness in for example `t1234-foo.sh`,
  using something like:

  ```sh
  $ git bisect start origin/pu master
  $ git bisect run sh -c 'make && cd t && ./t1234-foo.sh --stress --stress-limit=300'
  ```

  Gábor and Peff then discussed a few details. Regarding how to select a
  good N to pass to `--stress-limit=<N>`, Gábor suggested running the
  test script with `--stress` 3-5 times to trigger the failure, taking
  the highest repetition count that was necessary for the failure and
  multiplying it by 4-6 to get a round number".

  Gábor later sent [a subsequent patch](https://public-inbox.org/git/20190211195803.1682-1-szeder.dev@gmail.com/)
  to fix a minor issue in his previous patches, as it seems that some
  shells require the `!` character to start a non-matching pattern
  bracket expression instead of `^` that he had used.

  These improvements to the `--stress` option made it in the Git
  2.21.0 release too.

  Even more recently Johannes Schindelin, alias Dscho, sent
  [a small patch series](https://public-inbox.org/git/pull.155.git.gitgitgadget@gmail.com/)
  to improve on the previous work by:

    - having `--stress-limit=<N>` imply `--stress`
    - introducing `--stress-jobs=<N>`

  The goal is to avoid mistakenly using `--stress=<N>` when one wants
  to limit the number of number of times the test script is run (which
  should be done using `--stress-limit=<N>`).

  Dscho then sent a [second version](https://public-inbox.org/git/pull.155.v2.git.gitgitgadget@gmail.com/)
  of his patch series with a few improvements.

  These patches were reviewed by Junio, Eric Sunshine, Peff and
  Gábor. The changes have been merged to the 'next' branch and are
  planned to be merged in the 'master' branch soon.


<!---
### Support
-->

<!---
## Developer Spotlight:
-->

## Releases

+ GitLab [11.8.2](https://about.gitlab.com/2019/03/14/gitlab-11-8-2-released/),
[11.8.1](https://about.gitlab.com/2019/03/04/security-release-gitlab-11-dot-8-dot-1-released/)
+ Bitbucket Server [6.1](https://confluence.atlassian.com/bitbucketserver/bitbucket-server-release-notes-872139866.html)
+ Gerrit Code Review [2.16.7](https://www.gerritcodereview.com/2.16.html#2167),
[2.16.6](https://www.gerritcodereview.com/2.16.html#2166),
[2.15.11](https://www.gerritcodereview.com/2.15.html#21511)
+ GitHub Enterprise [2.16.4](https://enterprise.github.com/releases/2.16.4/notes),
[2.15.9](https://enterprise.github.com/releases/2.15.9/notes),
[2.14.16](https://enterprise.github.com/releases/2.14.16/notes),
[2.13.22](https://enterprise.github.com/releases/2.13.22/notes)
+ GitHub Desktop [1.6.4](https://desktop.github.com/release-notes/),
[1.6.3](https://desktop.github.com/release-notes/)
+ GitKraken [5.0.2](https://support.gitkraken.com/release-notes/current),
[5.0.1](https://support.gitkraken.com/release-notes/current),
[5.0.0](https://support.gitkraken.com/release-notes/current)

## Other News

__Various__

* Videos of the [Git Merge 2019](https://git-merge.com/) conference
  (January 31th and February 1st 2019 in Brussels, Belgium) are now
  [available](https://www.youtube.com/playlist?list=PL0lo9MOBetEFqBue4vNcTEnkBjgIQU1Q3).

* The [Gerrit User Summit 2019](https://gus2019.eventbrite.com) will take place
  in Gothenburg 29-30 August, hosted by [Volvo Cars](http://volvocars.com).
  The event is free but seats are limited. For the first time also the community
  opens the 5 days Hackathon 24-28 August, same location, to everyone: the only
  requirement is to be willing to learn and contribute to the JGit or Gerrit
  Code Review project.

* Google [is creating](https://opensource.googleblog.com/2019/03/introducing-season-of-docs.html)
  a project aimed at improving OSS projects documentation:
  [Season of Docs 2019](https://developers.google.com/season-of-docs/).
  Mentoring organizations can begin submitting applications to Google
  on April 2, 2019.


__Light reading__

* [Redesigning Github repository page](http://tonsky.me/blog/github-redesign/)
  by Nikita Prokopov describes how the author would have changed the design.

* [Write yourself a Git!](https://wyag.thb.lt/) by Thibault Polge is
  an attempt at explaining the Git version control system from the
  bottom up, that is, starting at the most fundamental level moving up
  from there. All it takes to understand Git internals is to
  reimplement Git from scratch  in exactly 503 lines of very simple
  Python code.

* [10 Git Commands You Should Know; Plus tips to save time with Git](https://towardsdatascience.com/10-git-commands-you-should-know-df54bea1595c)
  by Jeff Hale.

* [Git hacks you should know about](https://dev.to/teamxenox/git-hacks-you-should-know-about-16pk)
  by Ankur Biswas; most of these is a regular workflow stuff, though
  (and you need to take care as some of commands rewrite history).

* [Data Versioning](https://emilygorcenski.com/post/data-versioning/)
  by Emily Gorcenski identifies four key axes on which machine
  learning systems have a notion of version along with some brief
  recommendations for how to simplify it a bit.


__Git tools and sites__

* [Git Interactive Rebase Tool](https://gitrebasetool.mitmaro.ca/) is
  an improved sequence editor for Git interactive rebase by
  [MitMaro](https://github.com/MitMaro).

* [radicle](http://radicle.xyz/) is a peer-to-peer stack for code
  collaboration based on Git and [IPFS](https://ipfs.io/).

* [Git-graph](https://github.com/hoduche/git-graph) by
  [Henri-Olivier Duché](https://github.com/hoduche)
  can help you "Learn Git fast and well - by visualizing the inner graph of your Git
  repositories".

* [Pachyderm](https://www.pachyderm.io/open_source.html) is designed
  to enable sustainable data science workflows via a language-agnostic
  system for *data versioning* with data pipelining.  Similar tools,
  namely [DVC](https://dvc.org) (Data Version Control)
  and [Meltano](https://gitlab.com/meltano/meltano), were described
  in [Git Rev News Edition #42](https://git.github.io/rev_news/2018/08/22/edition-42/).

* [git ready](http://gitready.com/): learn Git one commit at a time;
  tips are split into beginner, intermediate and advanced.
  Latest tip is from 2015, though.


## Credits

This edition of Git Rev News was curated by
Christian Couder &lt;<christian.couder@gmail.com>&gt;,
Jakub Narębski &lt;<jnareb@gmail.com>&gt;,
Markus Jansen &lt;<mja@jansen-preisler.de>&gt; and
Gabriel Alcaras &lt;<gabriel.alcaras@telecom-paristech.fr>&gt;
with help from Luca Milanesio &lt;<luca.milanesio@gmail.com>&gt;.
