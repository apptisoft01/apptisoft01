---
title: Git Rev News Edition 43 (September 19th, 2018)
layout: default
date: 2018-09-19 12:06:51 +0100
author: chriscool
categories: [news]
navbar: false
---

## Git Rev News: Edition 43 (September 19th, 2018)

Welcome to the 43rd edition of [Git Rev News](https://git.github.io/rev_news/rev_news/),
a digest of all things Git. For our goals, the archives, the way we work, and how to contribute or to
subscribe, see [the Git Rev News page](https://git.github.io/rev_news/rev_news/) on [git.github.io](http://git.github.io).

This edition covers what happened during the month of August 2018.

## Discussions

### General

* Google Summer of Code 2018 wrap up

  The three students who worked on [projects](https://summerofcode.withgoogle.com/organizations/5376866043559936/#projects)
  to improve Git this summer as part of
  [Google Summer of Code 2018](https://summerofcode.withgoogle.com)
  have successfully passed their final evaluation.

  They have created repositories with a lot of information related to their work:

    - Alban Gruin's [Convert interactive rebase to C](https://github.com/agrn/gsoc2018)
    - Pratik Karki's [Convert rebase and its options to C](https://github.com/prertik/GSoC2018)
    - Paul-Sebastian Ungureanu's [Convert `git stash` to builtin](https://github.com/ungps/gsoc2018)

  Their patch series are still not fully merged, but it seems that this
  is likely to happen after perhaps a few more review and improvement
  cycles.

  Fast, built-in versions of `git stash` and `git rebase` based on their
  work are already available as experimental options in
  [Git for Windows 2.19.0](https://public-inbox.org/git/20180913022344.1348-1-johannes.schindelin@gmx.de/).

  Congratulations to them and their mentors!

* [git-bug: Distributed bug tracker embedded in git](https://public-inbox.org/git/CACSZ0Pwzs2e7E5RUEPDcEUsa=inzCyBAptU7YaCUw+5=MutSsA@mail.gmail.com/)

  Michael Muré emailed the mailing list to announce that he had just
  released "[git-bug](https://github.com/MichaelMure/git-bug), a
  distributed bug tracker that embeds in git".

  Michael had previously announced it on
  [Hacker News](https://news.ycombinator.com/item?id=17782121)
  where Ævar Arnfjörð Bjarmason suggested him to also post on the
  mailing list.

  Michael described his tool like this:

  > It uses git's internal storage to store bugs information in a way
  > that can be merged without conflict. You can push/pull to the normal
  > git remote you are already using to interact with other people. Normal
  > code and bugs are completely separated and no files are added in the
  > regular branches.

  and:

  > It's an all-in-one binary that is picked up by git as a porcelain
  > command. It features a set of CLI command for simple interaction, an
  > interactive terminal UI and a rich web UI.

  He also gave a [link to the documentation of the internal design](https://github.com/MichaelMure/git-bug/blob/master/doc/model.md).

  Jonathan Nieder replied to Michael asking if it might be possible to
  rename the tool to use a less generic name, as Jonathan envisioned "a
  future Git command like `git bug` to produce a bug report with
  appropriate diagnostics for a bug in Git".

  Ævar replied to Jonathan suggesting other names for the envisioned
  command to report bugs in Git, and starting a subthread about
  adopting a policy regarding external tools named "git-whatever".

  This subthread involved Ævar, Jonathan and towards the end Jeff
  King, alias Peff. It looks like the Git community is likely to
  continue to recommend against too generic names. Peff gave the
  example of the Microsoft GVFS tool which is in a similar situation,
  as people are thinking about using the `git-vfs` command name which
  Peff also considers too generic.

  Tacitus Aedifex also replied to Michael saying that he had "often
  wanted an integrated bug database like this", and that he had
  created his own solution for this purpose using a "subrepo storing
  bug reports and comments in .txt files" and "bash porcelain scripts".

  Junio Hamano, the Git maintainer, replied to Michael, too. He told
  that this reminds him of a "demo Scott Chacon showed us ages ago".

  Jonathan added that the tool Scott demoed was TicGit. Then Jonathan
  started along with Kyle Meyer to compile the following lists of
  similar tools and links related to them in a small subthread:
    - tools:
      - [TicGit](https://github.com/jeffWelling/ticgit)
      - [Ditz](https://github.com/jashmenn/ditz)
      - [git-issues](https://github.com/duplys/git-issues)
      - [cil](https://github.com/chilts/cil)
      - [Bugs Everywhere](http://bugseverywhere.org/)
      - milli by Steve Kemp (no copy found)
      - [Simple Defects](https://syncwith.us/sd/)
      - [Kipling](https://gitorious.org/kipling/mainline)
      - [BuGit](https://gitlab.com/monnier/bugit) ([discussion on the mailing list](https://public-inbox.org/git/jwva8psr6vr.fsf-monnier+gmane.comp.version-control.git@gnu.org/))
      - [git-dit](https://github.com/neithernut/git-dit)

    - lists of such tools:
      - [good list on a non Git-specific wiki](https://dist-bugs.branchable.com/software/)
      - [old list on the Git wiki](https://git.wiki.kernel.org/index.php/InterfacesFrontendsAndTools#Bug.2Fissue_trackers.2C_etc)
      - [nice though old list](http://www.cs.unb.ca/~bremner/blog/posts/git-issue-trackers/)

  <br>
  Jonathan commented that it was nice to see new work in this area as
  "it seems to have gone mostly quiet since 2014". He also added
  git-dit authors in CC of his last email in the subthread, while
  saying that git-dit seems to have "very similar goals and a similar
  data model" as git-bug, and suggesting that the authors could work
  "more closely together".

  This later prompted Julian Ganz, a co-author of git-dit, to request
  comments in an email called
  "[\[RFC\] Git enumerations](https://public-inbox.org/git/20180820195929.58444ae0@neithernut.Speedport_W_921V_1_39_000/)"
  about a functionality which he had originally planned on introducing
  it as a git-dit internal feature. Unfortunately, it looks like no one
  commented on the proposed feature.

  Jonathan also sent another reply to Michael's original
  email. Commenting on the [documentation of the internal design](https://github.com/MichaelMure/git-bug/blob/master/doc/model.md)
  of git-bug, he said that he likes that git-bug uses the hash of the
  first commit in the chain of related commits as identifier for
  the bug.

  About the fact that Git doesn't provide a low-level command to
  rebase a branch onto another without touching the index, Jonathan
  replied that a lot of related work has been done lately, as merge
  code (also used for cherry-pick) is less reliant on the index and
  worktree, and rebase code is being ported to C (see the article
  about Google Summer of Code 2018 above). Jonathan suggested setting
  the `GIT_INDEX` environment variable to point to a temporary index
  file as a work-around until something like
  `git cherry-pick --onto=<branch> <revisions>` is implemented.

  Jonathan then asked about which federation model git-bug intends to
  support. Michael replied giving technical details about how the tool
  works and saying:

  > So for now, collaboration is based on push/pull to whatever remote you
  > want, as git does, with the exception of the Web UI. The goal here is
  > to have it running locally for each user but also to make it a public
  > interface for users that don't have write access to the repo, much
  > like any bug tracker has.

  and:

  > In the future, it could be possible to have more fancy features like a
  > federated forge with ActivityPub, but that's way outside of the scope
  > of the project for now.

  About Jonathan's suggestion for an `--onto` option in `git
  cherry-pick`, Elijah Newren replied that, after his current work on
  the merge code, he indeed wanted to work on that, and also
  investigate "in-memory" merges to improve interactive rebase
  performance. He agreed that "we're pretty close to having a
  rebase-without-touching-index-or-worktree that we can make
  accessible to other scripts like git-bug".

<!---
### Reviews
-->

<!---
### Support
-->

<!---
## Developer Spotlight:
-->

## Releases

+ Git [v2.19.0](https://public-inbox.org/git/xmqqin3dru2u.fsf@gitster-ct.c.googlers.com/),
[v2.19.0-rc2](https://public-inbox.org/git/xmqqsh2o6ge6.fsf@gitster-ct.c.googlers.com/),
[v2.19.0-rc1](https://public-inbox.org/git/xmqqftyyfecy.fsf@gitster-ct.c.googlers.com/),
[v2.19.0-rc0](https://public-inbox.org/git/xmqqwoskadpe.fsf@gitster-ct.c.googlers.com/)
+ Git for Windows [v2.19.0(1)](https://github.com/git-for-windows/git/releases/tag/v2.19.0.windows.1)
+ GitLab [11.2.3, 11.1.6, and 11.0.6](https://about.gitlab.com/2018/08/28/security-release-gitlab-11-dot-2-dot-2-released/),
[11.2.1](https://about.gitlab.com/2018/08/23/gitlab-11-2-1-released/),
[11.2.0](https://about.gitlab.com/2018/08/22/gitlab-11-2-released/)
+ Bitbucket Server [v5.14](https://confluence.atlassian.com/bitbucketserver/bitbucket-server-release-notes-872139866.html)
+ Gerrit Code Review [v2.14.12](https://groups.google.com/forum/#!msg/repo-discuss/iTc-8qSHNOM/WchxHqg7BQAJ;context-place=forum/repo-discuss)
+ GitHub Enterprise [v2.14.5](https://enterprise.github.com/releases/2.14.5),
[v2.13.11](https://enterprise.github.com/releases/2.13.11),
[v2.12.19](https://enterprise.github.com/releases/2.12.19),
[v2.11.25](https://enterprise.github.com/releases/2.11.25),
[v2.14.4](https://enterprise.github.com/releases/2.14.4),
[v2.13.10](https://enterprise.github.com/releases/2.13.10),
[v2.12.18](https://enterprise.github.com/releases/2.12.18),
[v2.11.24](https://enterprise.github.com/releases/2.11.24),
[v2.14.3](https://enterprise.github.com/releases/2.14.3),
[v2.13.9](https://enterprise.github.com/releases/2.13.9),
[v2.12.17](https://enterprise.github.com/releases/2.12.17),
[v2.11.23](https://enterprise.github.com/releases/2.11.23)
+ GitHub Desktop [v1.4.0](https://desktop.github.com/release-notes/),
[v1.3.5](https://desktop.github.com/release-notes/),
[v1.3.4](https://desktop.github.com/release-notes/)
+ GitKraken [v4.0.4](https://support.gitkraken.com/release-notes/current),
[v4.0.3](https://support.gitkraken.com/release-notes/current)


## Other News

__Various__

* [GitOps — `git push` all the things](https://dzone.com/articles/gitops-git-push-all-the-things)
* [Gerrit User Summit 2018](https://gerrit.googlesource.com/summit/2018/+/master/index.md) will be hosted at Cloudera HQ in Palo Alto,
  15-16 Nov. Registration is now open to all Gerrit and JGit users, maintainers and supporters.
* [Highlights from Git 2.19](https://blog.github.com/2018-09-10-highlights-from-git-2-19/) on The GitHub Blog
* [New improvements and best practices for account security and recoverability at GitHub](https://blog.github.com/2018-07-31-new-improvements-and-best-practices-for-account-security-and-recoverability/)
* [Git-bug: A new distributed bug tracker embedded in git](https://hub.packtpub.com/git-bug-a-new-distributed-bug-tracker-embedded-in-git/) by Melisha Dsouza on Packt Hub


__Light reading__

* [Git commands to keep a fork up to date](https://philna.sh/blog/2018/08/21/git-commands-to-keep-a-fork-up-to-date/) by Phil Nash
* [I love git log](https://dev.to/drews256/i-love-git-log-off) by Andrew Stuntz
* [Enforce fast forward as merge strategy in Git](https://code-maven.com/enforce-fast-forward-as-merge-strategy) and some of Git hosting sites, by Gabor Szabo
* [Enforcing commit message format in Git -- on the client side](https://code-maven.com/enforcing-commit-message-format-in-git) with [`commit-msg` hook](https://git-scm.com/docs/githooks#_commit_msg) by Gabor Szabo
* [Slides from Git & GitHub Getting Started Workshop](https://polyhacks17.github.io/github-workshop/), originally by Gwen Lofman, modified by Greg Willard
* [Using [Shell] Aliases to Speed Up Your Git Workflow](https://dev.to/robertcoopercode/using-aliases-to-speed-up-your-git-workflow-2f5a) by Robert Cooper 
* [and the second top voted question on StackOverflow is... how to undo the most recent commit in Git](https://dev.to/tomerbendavid/the-second-most-voted-question-on-stackoverflow-is-60b) by Tomer Ben David
* [Visualize Merge History with `git log --graph`, `--first-parent`, and `--no-merges`](https://redfin.engineering/visualize-merge-history-with-git-log-graph-first-parent-and-no-merges-c6a9b5ff109c) by Dan Fabulich (2017)
* [How to find stuff in Git](https://medium.com/@tygertec/how-to-find-stuff-in-git-35d4cb8c1845) by Ty Walls (2017)


__Git tools and sites__

* [bat](https://github.com/sharkdp/bat), a `cat(1)` clone with syntax highlighting and Git integration
* [Lerna](https://lernajs.io/) is a tool that optimizes the workflow around managing multi-package JavaScript repositories (monorepos) with git and npm
* [Dat](https://datproject.org/) is a new peer-to-peer protocol for sharing, archiving, and cataloging large data sets, that uses some of the concepts of BitTorrent and Git.
  Described in LWN.net article [Sharing and archiving data sets with Dat](https://lwn.net/Articles/763492/) by Antoine Beaupré.
  For other version control tools for Data Science see [Git Rev News Edition #42](https://git.github.io/rev_news/2018/08/22/edition-42/).
* [LiteTree: SQLite with Branches](https://github.com/aergoio/litetree) is a modification of the SQLite engine to support branching, like Git
* [GitHooks.com](https://githooks.com/) is a guide to the wonders of git hooks, with the list of hooks, links to some articles about git hooks, and list of various related projects; accepts pull requests 



## Credits

This edition of Git Rev News was curated by
Christian Couder &lt;<christian.couder@gmail.com>&gt;,
Jakub Narębski &lt;<jnareb@gmail.com>&gt;,
Markus Jansen &lt;<mja@jansen-preisler.de>&gt; and
Gabriel Alcaras &lt;<gabriel.alcaras@telecom-paristech.fr>&gt;
with help from Johannes Schindelin and Luca Milanesio.
